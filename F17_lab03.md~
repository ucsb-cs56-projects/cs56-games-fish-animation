pair partner1: Xiao Sun
pair partner2: Yuhao Zhang

# Lab03

## Question(a)
It is a fish game like Feeding Frenzy. The shark eat small fish to gain health but lose health if it touches the jellyfish.

## Question(b)
..* As a player, I can use the mouse and keyboard to control the shark
..* As a player, I can choose the difficulty for the game
..* As a player, I may lose health by eating jellyfish
..* As a player, I will gain health and stay alive by eating fish

## Question(c)
The software runs well. It allows the users to control a shark, which gain health by approximating fish and lose health by eating a jellyfish. 

## Question(d)
..* As a man on a boat, I would hurt the shark by throwing harpoons. 
..* As a fish, I shall be more pretty to attract the shark.
..* As a score board, I will show the scores to win and the scores added per fish eaten.
..* As a shark, I could grow up by eating fish.  

## Question(e)
Basically, the README.md is quite good. It descibes the errors we may encounter in the future. It also includes classes like logics, GUI and mixed. However, becuase it is README file. If it can talk about little about the game itself, it will be better. I want to add brief description and rules.

## Question(f)
Target jar and run-from-jar do not have descriptions right now. There are no old legacy JWS stuff that needs to be removed.

## Question(g)
There are 30 open questions and they are enough for us to earn 1000. Besides, the issues are pretty clear.

## Question(h)
We have not added any new issues yet. We may add in the future.

## Question(i)
There are a total of 14 java classes. GUI claeese include Menu, GeneralPathWrapper, FishAnimationEnvironment and SoundEffect; Sea creature classes include ScumOfTheSea, Fish, Shark, JellyFish, Bubble, Character and Plankton; Score classes include(Score, ScoreComparer and ScoreManager).

At First glance, the code and methods are clear and the comments are suitable. Besides, the relationship between classes are also obvious such as the relation between Score and ScoreComparer (ScoreComparer compare the scores the players get). However, with a detailed analysis, it is easy to find some serious problem in the animation although the program runs well each time.

## Question(j)
There is no Junit Test but it is somehow useful to add Junit test program. It can help programmers to debug. However, it is more convenient to directly run the game to detect the bug if there is.